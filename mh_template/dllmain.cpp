// dllmain.cpp : Defines the entry point for the DLL application.
#include "stdafx.h"
#include <stdio.h>
#include "MinHook.h"
#include <WinSock2.h>
#include <WinInet.h>
#include <wincrypt.h>
#include "Logger.h"

#if defined _M_X64
#pragma comment(lib, "MinHook.x64.lib")
#elif defined _M_IX86
#pragma comment(lib, "MinHook.x86.lib")
#endif

template <typename T>
inline MH_STATUS MH_CreateHookEx(void* pTarget, void* const pDetour, T** ppOriginal)
{
	return MH_CreateHook(pTarget, pDetour, reinterpret_cast<void**>(ppOriginal));
}


typedef int(WINAPI *CRYPTHASHDATA)(HCRYPTHASH hHash, BYTE *pbData, DWORD dwDataLen, DWORD dwFlags);
typedef int(WINAPI *CRYPTDECRYPT)(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen);
typedef int(WINAPI *CRYPTENCRYPT)(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen, DWORD dwBufLen);


//wskazniki do oryginalnych funkcji
CRYPTHASHDATA fpcrypthashdata = NULL;
CRYPTDECRYPT fpcryptdecrypt = NULL;
CRYPTENCRYPT fpcryptencrypt = NULL;


//nowe funkcje wykonywane zamiast oryginalnych

int WINAPI Prevenitycryptdecrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen)
{
	
	DWORD rozmiar = *pdwDataLen;
	WriteToLogFile("Before CryptDecrypt call: ", pbData, rozmiar);
	int dane = 0;
	dane = fpcryptdecrypt(hKey, hHash, Final, dwFlags, pbData, pdwDataLen);
	WriteToLogFile("After CryptDecrypt call: ", pbData, rozmiar);
	return dane;
}

int WINAPI Prevenitycryptencrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen, DWORD dwBufLen)
{
	
	DWORD rozmiar = *pdwDataLen;
	WriteToLogFile("Before CryptEncrypt call: ", pbData, rozmiar);
	int dane = 0;
	dane = fpcryptencrypt(hKey, hHash, Final, dwFlags, pbData, pdwDataLen, dwBufLen);
	WriteToLogFile("After CryptEncrypt call: ", pbData, rozmiar);
	return dane;

}



int WINAPI Prevenitycrypthashdata(HCRYPTHASH hHash, BYTE *pbData, DWORD dwDataLen, DWORD dwFlags)
{

	WriteToLogFile("Before CryptHashData call: ", pbData, dwDataLen);
	int dane = fpcrypthashdata(hHash, pbData, dwDataLen, dwFlags);
	WriteToLogFile("After CryptHashData call: ", pbData, dwDataLen);
	return dane;
}



LPVOID pcrypthashdata = NULL;
LPVOID pcryptdecrypt = NULL;
LPVOID pcryptencrypt = NULL;

extern "C" BOOL APIENTRY DllMain(HMODULE hModule,
	DWORD  ul_reason_for_call,
	LPVOID lpReserved
	)
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:

		MH_Initialize();
		
		pcrypthashdata = GetProcAddress(GetModuleHandleA("Advapi32.dll"), "CryptHashData");
		pcryptdecrypt = GetProcAddress(GetModuleHandleA("Advapi32.dll"), "CryptDecrypt");
		pcryptencrypt = GetProcAddress(GetModuleHandleA("Advapi32.dll"), "CryptEncrypt");	

		MH_CreateHookEx(pcrypthashdata, &Prevenitycrypthashdata, &fpcrypthashdata);
		MH_CreateHookEx(pcryptdecrypt, &Prevenitycryptdecrypt, &fpcryptdecrypt);
		MH_CreateHookEx(pcryptencrypt, &Prevenitycryptencrypt, &fpcryptencrypt);
	
		MH_EnableHook(MH_ALL_HOOKS);
		

		break;


	case DLL_THREAD_ATTACH:

		
		break;
		


	case DLL_THREAD_DETACH:

	
		break;
	case DLL_PROCESS_DETACH:
	
		MH_DisableHook(MH_ALL_HOOKS);
		MH_Uninitialize();
		break;
	}
	return TRUE;
}

